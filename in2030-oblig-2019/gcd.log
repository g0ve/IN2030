   1: 
   2: # A program to compute the greatest common divisor
   3: # of two numbers, i.e., the biggest number by which
   4: # two numbers can be divided without a remainder.
   5: #
   6: # Example:  gcd(180,48) = 12
   7: 
   8: def GCD (m, n):
Scanner: def token on line 8
Scanner: name token on line 8: GCD
Scanner: ( token on line 8
Scanner: name token on line 8: m
Scanner: , token on line 8
Scanner: name token on line 8: n
Scanner: ) token on line 8
Scanner: : token on line 8
Scanner: NEWLINE token on line 8
   9:    if n == 0:
Scanner: INDENT token on line 9
Scanner: if token on line 9
Scanner: name token on line 9: n
Scanner: == token on line 9
Scanner: integer literal token on line 9: 0
Scanner: : token on line 9
Scanner: NEWLINE token on line 9
  10:       return m
Scanner: INDENT token on line 10
Scanner: return token on line 10
Scanner: name token on line 10: m
Scanner: NEWLINE token on line 10
  11:    else:
Scanner: DEDENT token on line 11
Scanner: else token on line 11
Scanner: : token on line 11
Scanner: NEWLINE token on line 11
  12:       return GCD(n, m % n)
Scanner: INDENT token on line 12
Scanner: return token on line 12
Scanner: name token on line 12: GCD
Scanner: ( token on line 12
Scanner: name token on line 12: n
Scanner: , token on line 12
Scanner: name token on line 12: m
Scanner: % token on line 12
Scanner: name token on line 12: n
Scanner: ) token on line 12
Scanner: NEWLINE token on line 12
  13: 
  14: v1 = int(input("A number: "))
Scanner: DEDENT token on line 14
Scanner: DEDENT token on line 14
Scanner: name token on line 14: v1
Scanner: = token on line 14
Scanner: name token on line 14: int
Scanner: ( token on line 14
Scanner: name token on line 14: input
Scanner: ( token on line 14
Scanner: string literal token on line 14: "A number: "
Scanner: ) token on line 14
Scanner: ) token on line 14
Scanner: NEWLINE token on line 14
  15: v2 = int(input("Another number: "))
Scanner: name token on line 15: v2
Scanner: = token on line 15
Scanner: name token on line 15: int
Scanner: ( token on line 15
Scanner: name token on line 15: input
Scanner: ( token on line 15
Scanner: string literal token on line 15: "Another number: "
Scanner: ) token on line 15
Scanner: ) token on line 15
Scanner: NEWLINE token on line 15
  16: 
  17: res = GCD(v1,v2)
Scanner: name token on line 17: res
Scanner: = token on line 17
Scanner: name token on line 17: GCD
Scanner: ( token on line 17
Scanner: name token on line 17: v1
Scanner: , token on line 17
Scanner: name token on line 17: v2
Scanner: ) token on line 17
Scanner: NEWLINE token on line 17
  18: print('GCD('+str(v1)+','+str(v2)+') =', res)
Scanner: name token on line 18: print
Scanner: ( token on line 18
Scanner: string literal token on line 18: "GCD("
Scanner: + token on line 18
Scanner: name token on line 18: str
Scanner: ( token on line 18
Scanner: name token on line 18: v1
Scanner: ) token on line 18
Scanner: + token on line 18
Scanner: string literal token on line 18: ","
Scanner: + token on line 18
Scanner: name token on line 18: str
Scanner: ( token on line 18
Scanner: name token on line 18: v2
Scanner: ) token on line 18
Scanner: + token on line 18
Scanner: string literal token on line 18: ") ="
Scanner: , token on line 18
Scanner: name token on line 18: res
Scanner: ) token on line 18
Scanner: NEWLINE token on line 18
Scanner: E-o-f token

def GCD (m, n):
  if n == 0: 
    return m
  else: 
    return GCD(n, m % n)
v1 = int(input("A number: "))
v2 = int(input("Another number: "))
res = GCD(v1, v2)
print("GCD(" + str(v1) + "," + str(v2) + ") =", res)
Trace line 8: def GCD
Trace line 14: Call function input with params [A number: ]
Trace line 14: Call function int with params [69]
Trace line 14: v1 = 69
Trace line 15: Call function input with params [Another number: ]
Trace line 15: Call function int with params [96]
Trace line 15: v2 = 96
Trace line 17: Call function GCD with params [69, 96]
Trace line 9: else: ...
Trace line 12: Call function GCD with params [96, 69]
Trace line 9: else: ...
Trace line 12: Call function GCD with params [69, 27]
Trace line 9: else: ...
Trace line 12: Call function GCD with params [27, 15]
Trace line 9: else: ...
Trace line 12: Call function GCD with params [15, 12]
Trace line 9: else: ...
Trace line 12: Call function GCD with params [12, 3]
Trace line 9: else: ...
Trace line 12: Call function GCD with params [3, 0]
Trace line 9: if True alt #1: ...
Trace line 10: return 3
Trace line 12: return 3
Trace line 12: return 3
Trace line 12: return 3
Trace line 12: return 3
Trace line 12: return 3
Trace line 12: return 3
Trace line 17: res = 3
Trace line 18: Call function str with params [69]
Trace line 18: Call function str with params [96]
Trace line 18: Call function print with params [GCD(69,96) =, 3]
Trace line 18: None
E-o-f
